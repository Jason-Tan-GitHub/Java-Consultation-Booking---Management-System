/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

import com.toedter.calendar.JDateChooser;
import java.awt.*;
import java.io.*;
import java.text.SimpleDateFormat;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import process.user_page_processes;
import process.processes;

/**
 *
 * @author User
 */
public class lecturer_home_page extends javax.swing.JFrame {

    /**
     * Creates new form welcome_lecturer_page_2
     */
    private String lectureName, lectureEMail, lecturePass, ID, date, time, starttime, endtime, formattedDate, line;
    private boolean isEditable = false;
    main_interface mi = new main_interface();
    private Date selectedDate;
    SimpleDateFormat sdf = new SimpleDateFormat("d MMM y");
    processes pro = new processes();
    ArrayList<String> dataList = new ArrayList<>();

    public lecturer_home_page(String ID, String lectureName, String lectureEMail, String lecturePass) {
        this.ID = ID;
        this.lectureName = lectureName;
        this.lectureEMail = lectureEMail;
        this.lecturePass = lecturePass;

        initComponents();

        try (BufferedReader readerL = new BufferedReader(new FileReader(pro.getFilePath(3)))) {
            while ((line = readerL.readLine()) != null) {
                String[] parts = line.split(",");
                String[] data = {parts[2], parts[3], parts[4]};
                DefaultTableModel Model1 = (DefaultTableModel) consultationTable.getModel();
                Model1.addRow(data);
            }
        } catch (Exception e) {
//            JOptionPane.showMessageDialog(null, "File not found.", "Error", JOptionPane.ERROR_MESSAGE);
        }

        try (BufferedReader readerL = new BufferedReader(new FileReader(pro.getFilePath(5)))) {
            while ((line = readerL.readLine()) != null) {
                String[] parts = line.split(",");
                if (lectureEMail.equals(parts[3])) {
                    String[] data = {parts[1], parts[2], parts[5], parts[6], parts[7], parts[8], parts[9]};
                    DefaultTableModel Model2 = (DefaultTableModel) Appointment.getModel();
                    Model2.addRow(data);
                }
            }
        } catch (Exception e) {
            System.out.println("No appointments.");
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        timePicker1 = new com.raven.swing.TimePicker();
        timePicker2 = new com.raven.swing.TimePicker();
        jPanel5 = new javax.swing.JPanel();
        name = new javax.swing.JLabel();
        Home = new javax.swing.JButton();
        Settings = new javax.swing.JButton();
        Logout = new javax.swing.JButton();
        feedback = new javax.swing.JButton();
        appointment = new javax.swing.JButton();
        layeredPane = new javax.swing.JLayeredPane();
        card1 = new javax.swing.JPanel();
        consultationPanel = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        consultationTable = new javax.swing.JTable();
        consultationAdd = new javax.swing.JButton();
        consultationSave = new javax.swing.JButton();
        consultationDelete = new javax.swing.JButton();
        dateInput = new com.toedter.calendar.JDateChooser();
        clearConsultationFields = new javax.swing.JButton();
        showTimePicker1 = new javax.swing.JButton();
        showTimePicker2 = new javax.swing.JButton();
        timeEnd = new javax.swing.JTextField();
        timeStart = new javax.swing.JTextField();
        jScrollPane4 = new javax.swing.JScrollPane();
        locationInput = new javax.swing.JTextArea();
        card2 = new javax.swing.JPanel();
        settingsPanel = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        nameTextField = new javax.swing.JTextField();
        emailTextField = new javax.swing.JTextField();
        passwordTextField = new javax.swing.JPasswordField();
        save = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        id = new javax.swing.JTextPane();
        editDetails = new javax.swing.JToggleButton();
        card3 = new javax.swing.JPanel();
        homePanel1 = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        Appointment = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        approveReschedule = new javax.swing.JButton();
        jLabel25 = new javax.swing.JLabel();
        selected1 = new javax.swing.JTextField();
        completeButton = new javax.swing.JButton();
        approveReschedule1 = new javax.swing.JButton();
        card4 = new javax.swing.JPanel();
        feedbackPanel = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane8 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane9 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jScrollPane10 = new javax.swing.JScrollPane();
        jTextArea3 = new javax.swing.JTextArea();
        jButton3 = new javax.swing.JButton();

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 650, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("APU Consultation System (Lecturer)");

        jPanel5.setBackground(new java.awt.Color(204, 204, 255));
        jPanel5.setAlignmentX(1.0F);

        name.setFont(new java.awt.Font("MS PGothic", 0, 18)); // NOI18N
        name.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        name.setText("Welcome back " + lectureName);
        name.setBorder(javax.swing.BorderFactory.createMatteBorder(2, 0, 2, 0, new java.awt.Color(0, 0, 0)));

        Home.setBackground(new java.awt.Color(204, 204, 255));
        Home.setFont(new java.awt.Font("MS PGothic", 1, 18)); // NOI18N
        Home.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/home.png"))); // NOI18N
        Home.setText("  Home");
        Home.setBorder(null);
        Home.setContentAreaFilled(false);
        Home.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        Home.setDefaultCapable(false);
        Home.setOpaque(true);
        Home.setPreferredSize(new java.awt.Dimension(80, 32));
        Home.setRequestFocusEnabled(false);
        Home.setVerifyInputWhenFocusTarget(false);
        Home.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                HomeMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                HomeMouseExited(evt);
            }
        });
        Home.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HomeActionPerformed(evt);
            }
        });

        Settings.setBackground(new java.awt.Color(204, 204, 255));
        Settings.setFont(new java.awt.Font("MS PGothic", 1, 18)); // NOI18N
        Settings.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/settings.png"))); // NOI18N
        Settings.setText("  Settings");
        Settings.setBorder(null);
        Settings.setBorderPainted(false);
        Settings.setContentAreaFilled(false);
        Settings.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        Settings.setDefaultCapable(false);
        Settings.setOpaque(true);
        Settings.setPreferredSize(new java.awt.Dimension(80, 32));
        Settings.setRequestFocusEnabled(false);
        Settings.setVerifyInputWhenFocusTarget(false);
        Settings.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                SettingsMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                SettingsMouseExited(evt);
            }
        });
        Settings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SettingsActionPerformed(evt);
            }
        });

        Logout.setBackground(new java.awt.Color(204, 204, 255));
        Logout.setFont(new java.awt.Font("MS PGothic", 1, 18)); // NOI18N
        Logout.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/logout.png"))); // NOI18N
        Logout.setText("  Log out");
        Logout.setBorder(null);
        Logout.setBorderPainted(false);
        Logout.setContentAreaFilled(false);
        Logout.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        Logout.setDefaultCapable(false);
        Logout.setOpaque(true);
        Logout.setPreferredSize(new java.awt.Dimension(80, 32));
        Logout.setRequestFocusEnabled(false);
        Logout.setVerifyInputWhenFocusTarget(false);
        Logout.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                LogoutMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                LogoutMouseExited(evt);
            }
        });
        Logout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LogoutActionPerformed(evt);
            }
        });

        feedback.setBackground(new java.awt.Color(204, 204, 255));
        feedback.setFont(new java.awt.Font("MS PGothic", 1, 18)); // NOI18N
        feedback.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/feedback.png"))); // NOI18N
        feedback.setText("  View Feedback");
        feedback.setBorder(null);
        feedback.setBorderPainted(false);
        feedback.setContentAreaFilled(false);
        feedback.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        feedback.setDefaultCapable(false);
        feedback.setOpaque(true);
        feedback.setPreferredSize(new java.awt.Dimension(80, 32));
        feedback.setRequestFocusEnabled(false);
        feedback.setVerifyInputWhenFocusTarget(false);
        feedback.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                feedbackMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                feedbackMouseExited(evt);
            }
        });
        feedback.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                feedbackActionPerformed(evt);
            }
        });

        appointment.setBackground(new java.awt.Color(204, 204, 255));
        appointment.setFont(new java.awt.Font("MS PGothic", 1, 18)); // NOI18N
        appointment.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/appointment.png"))); // NOI18N
        appointment.setText("Appointments");
        appointment.setBorder(null);
        appointment.setBorderPainted(false);
        appointment.setContentAreaFilled(false);
        appointment.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        appointment.setDefaultCapable(false);
        appointment.setOpaque(true);
        appointment.setPreferredSize(new java.awt.Dimension(80, 32));
        appointment.setRequestFocusEnabled(false);
        appointment.setVerifyInputWhenFocusTarget(false);
        appointment.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                appointmentMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                appointmentMouseExited(evt);
            }
        });
        appointment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                appointmentActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Home, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(Settings, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(Logout, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(appointment, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(name, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(14, Short.MAX_VALUE))
            .addComponent(feedback, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(name, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15)
                .addComponent(Home, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(Settings, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(appointment, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(feedback, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(Logout, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30))
        );

        layeredPane.setLayout(new java.awt.CardLayout());

        card1.setBackground(new java.awt.Color(255, 255, 255));

        consultationPanel.setBackground(new java.awt.Color(204, 204, 255));
        consultationPanel.setPreferredSize(new java.awt.Dimension(379, 84));

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 48)); // NOI18N
        jLabel3.setText("Manage Consultation");

        javax.swing.GroupLayout consultationPanelLayout = new javax.swing.GroupLayout(consultationPanel);
        consultationPanel.setLayout(consultationPanelLayout);
        consultationPanelLayout.setHorizontalGroup(
            consultationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(consultationPanelLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel3)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        consultationPanelLayout.setVerticalGroup(
            consultationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(consultationPanelLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jLabel3)
                .addGap(10, 10, 10))
        );

        consultationTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Time", "Location", "Date"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        consultationTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                consultationTableMouseReleased(evt);
            }
        });
        jScrollPane2.setViewportView(consultationTable);

        consultationAdd.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        consultationAdd.setText("Add");
        consultationAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                consultationAddActionPerformed(evt);
            }
        });

        consultationSave.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        consultationSave.setText("Save");
        consultationSave.setEnabled(false);
        consultationSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                consultationSaveActionPerformed(evt);
            }
        });

        consultationDelete.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        consultationDelete.setText("Delete");
        consultationDelete.setEnabled(false);
        consultationDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                consultationDeleteActionPerformed(evt);
            }
        });

        dateInput.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        dateInput.setMinimumSize(new java.awt.Dimension(10, 10));
        dateInput.setPreferredSize(new java.awt.Dimension(10, 10));

        clearConsultationFields.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        clearConsultationFields.setText("Clear");
        clearConsultationFields.setEnabled(false);
        clearConsultationFields.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearConsultationFieldsActionPerformed(evt);
            }
        });

        showTimePicker1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        showTimePicker1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/time.png"))); // NOI18N
        showTimePicker1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showTimePicker1ActionPerformed(evt);
            }
        });

        showTimePicker2.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        showTimePicker2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/time.png"))); // NOI18N
        showTimePicker2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showTimePicker2ActionPerformed(evt);
            }
        });

        timeEnd.setEditable(false);
        timeEnd.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        timeEnd.setForeground(new java.awt.Color(153, 153, 153));
        timeEnd.setText("Ending Time");
        timeEnd.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                timeEndFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                timeEndFocusLost(evt);
            }
        });

        timeStart.setEditable(false);
        timeStart.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        timeStart.setForeground(new java.awt.Color(153, 153, 153));
        timeStart.setText("Starting Time");
        timeStart.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                timeStartFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                timeStartFocusLost(evt);
            }
        });

        locationInput.setColumns(20);
        locationInput.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        locationInput.setForeground(new java.awt.Color(153, 153, 153));
        locationInput.setRows(5);
        locationInput.setText("Location");
        locationInput.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                locationInputFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                locationInputFocusLost(evt);
            }
        });
        jScrollPane4.setViewportView(locationInput);

        javax.swing.GroupLayout card1Layout = new javax.swing.GroupLayout(card1);
        card1.setLayout(card1Layout);
        card1Layout.setHorizontalGroup(
            card1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(consultationPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 746, Short.MAX_VALUE)
            .addGroup(card1Layout.createSequentialGroup()
                .addContainerGap(68, Short.MAX_VALUE)
                .addGroup(card1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(card1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jScrollPane2)
                        .addGroup(card1Layout.createSequentialGroup()
                            .addGroup(card1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(card1Layout.createSequentialGroup()
                                    .addComponent(timeStart, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(showTimePicker1))
                                .addGroup(card1Layout.createSequentialGroup()
                                    .addComponent(timeEnd, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(showTimePicker2))
                                .addComponent(dateInput, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGap(151, 151, 151)
                            .addGroup(card1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(consultationSave, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(clearConsultationFields, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(18, 18, 18)
                            .addGroup(card1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(consultationAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(consultationDelete, javax.swing.GroupLayout.Alignment.TRAILING))))
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 380, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 67, Short.MAX_VALUE))
        );
        card1Layout.setVerticalGroup(
            card1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(card1Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(consultationPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 51, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(dateInput, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4)
                .addGroup(card1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, card1Layout.createSequentialGroup()
                        .addGroup(card1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(timeStart, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(showTimePicker1))
                        .addGap(10, 10, 10)
                        .addGroup(card1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(timeEnd, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(showTimePicker2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(1, 1, 1))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, card1Layout.createSequentialGroup()
                        .addGroup(card1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(consultationSave)
                            .addComponent(consultationAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(card1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(consultationDelete)
                            .addComponent(clearConsultationFields))))
                .addGap(10, 10, 10)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(102, Short.MAX_VALUE))
        );

        layeredPane.add(card1, "card4");

        card2.setBackground(new java.awt.Color(255, 255, 255));

        settingsPanel.setBackground(new java.awt.Color(204, 204, 255));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 48)); // NOI18N
        jLabel2.setText("Settings");

        javax.swing.GroupLayout settingsPanelLayout = new javax.swing.GroupLayout(settingsPanel);
        settingsPanel.setLayout(settingsPanelLayout);
        settingsPanelLayout.setHorizontalGroup(
            settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(settingsPanelLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        settingsPanelLayout.setVerticalGroup(
            settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(settingsPanelLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jLabel2)
                .addGap(10, 10, 10))
        );

        jPanel2.setBackground(new java.awt.Color(153, 204, 255));

        jLabel10.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel10.setText("Password");

        jLabel9.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel9.setText("Email");

        jLabel6.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel6.setText("Name");

        nameTextField.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        nameTextField.setText(lectureName);

        emailTextField.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        emailTextField.setText(lectureEMail);

        passwordTextField.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        passwordTextField.setText(lecturePass);

        save.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        save.setText("Save");
        save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveActionPerformed(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel11.setText("ID");

        id.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        id.setText(ID);
        jScrollPane1.setViewportView(id);
        id.setEditable(false);

        editDetails.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        editDetails.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/disableEdit.png"))); // NOI18N
        editDetails.setText("Edit Details");
        editDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editDetailsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(85, 85, 85)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel11)
                            .addComponent(jLabel10)
                            .addComponent(jLabel6)
                            .addComponent(jLabel9))
                        .addGap(30, 30, 30)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(emailTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 411, Short.MAX_VALUE)
                            .addComponent(nameTextField, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(passwordTextField, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane1)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(save)
                        .addGap(12, 12, 12)
                        .addComponent(editDetails)))
                .addGap(20, 20, 20))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(80, 80, 80)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11))
                .addGap(30, 30, 30)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addComponent(nameTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(emailTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(passwordTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(save, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(editDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(80, 80, 80))
        );

        javax.swing.GroupLayout card2Layout = new javax.swing.GroupLayout(card2);
        card2.setLayout(card2Layout);
        card2Layout.setHorizontalGroup(
            card2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(settingsPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, card2Layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(50, 50, 50))
        );
        card2Layout.setVerticalGroup(
            card2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(card2Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(settingsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 36, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap(37, Short.MAX_VALUE))
        );

        layeredPane.add(card2, "card3");

        card3.setBackground(new java.awt.Color(255, 255, 255));

        homePanel1.setBackground(new java.awt.Color(204, 204, 255));

        jLabel15.setFont(new java.awt.Font("Segoe UI", 0, 48)); // NOI18N
        jLabel15.setText("Appointments");

        javax.swing.GroupLayout homePanel1Layout = new javax.swing.GroupLayout(homePanel1);
        homePanel1.setLayout(homePanel1Layout);
        homePanel1Layout.setHorizontalGroup(
            homePanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(homePanel1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel15)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        homePanel1Layout.setVerticalGroup(
            homePanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(homePanel1Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jLabel15)
                .addGap(10, 10, 10))
        );

        Appointment.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Student Email", "Student Name", "Time", "Location", "Date", "Status", "Reschedule"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        Appointment.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                AppointmentMouseReleased(evt);
            }
        });
        jScrollPane5.setViewportView(Appointment);

        jButton1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jButton1.setText("Provide Feedback");

        approveReschedule.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        approveReschedule.setText("Approve Reschdule");

        jLabel25.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel25.setText("Selected Row");

        selected1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        completeButton.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        completeButton.setText("Complete");
        completeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                completeButtonActionPerformed(evt);
            }
        });

        approveReschedule1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        approveReschedule1.setText("Reject Reschedule");

        javax.swing.GroupLayout card3Layout = new javax.swing.GroupLayout(card3);
        card3.setLayout(card3Layout);
        card3Layout.setHorizontalGroup(
            card3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(homePanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, card3Layout.createSequentialGroup()
                .addGroup(card3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(card3Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(card3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane5)
                            .addGroup(card3Layout.createSequentialGroup()
                                .addComponent(jLabel25, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(selected1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 190, Short.MAX_VALUE)
                                .addComponent(completeButton)
                                .addGap(18, 18, 18)
                                .addComponent(approveReschedule))))
                    .addGroup(card3Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(card3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(approveReschedule1, javax.swing.GroupLayout.DEFAULT_SIZE, 184, Short.MAX_VALUE)
                            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(14, 14, 14))
        );
        card3Layout.setVerticalGroup(
            card3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(card3Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(homePanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 77, Short.MAX_VALUE)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(card3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel25)
                    .addComponent(selected1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(approveReschedule)
                    .addComponent(completeButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(approveReschedule1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addContainerGap(117, Short.MAX_VALUE))
        );

        layeredPane.add(card3, "card7");

        card4.setBackground(new java.awt.Color(255, 255, 255));

        feedbackPanel.setBackground(new java.awt.Color(204, 204, 255));

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 48)); // NOI18N
        jLabel5.setText("Feedback");

        javax.swing.GroupLayout feedbackPanelLayout = new javax.swing.GroupLayout(feedbackPanel);
        feedbackPanel.setLayout(feedbackPanelLayout);
        feedbackPanelLayout.setHorizontalGroup(
            feedbackPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(feedbackPanelLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel5)
                .addContainerGap(525, Short.MAX_VALUE))
        );
        feedbackPanelLayout.setVerticalGroup(
            feedbackPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(feedbackPanelLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jLabel5)
                .addGap(10, 10, 10))
        );

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane8.setViewportView(jTextArea1);

        jLabel1.setText("Student Feedback");

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jScrollPane9.setViewportView(jTextArea2);

        jLabel17.setText("Provide  Feedback");

        jLabel18.setText("Feedback provided");

        jTextArea3.setColumns(20);
        jTextArea3.setRows(5);
        jScrollPane10.setViewportView(jTextArea3);

        jButton3.setText("Provide Feedback");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout card4Layout = new javax.swing.GroupLayout(card4);
        card4.setLayout(card4Layout);
        card4Layout.setHorizontalGroup(
            card4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(feedbackPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(card4Layout.createSequentialGroup()
                .addGap(71, 71, 71)
                .addGroup(card4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel17)
                    .addComponent(jLabel1)
                    .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 600, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 600, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(card4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel18, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 600, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton3)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        card4Layout.setVerticalGroup(
            card4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(card4Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(feedbackPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24)
                .addComponent(jLabel17)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton3)
                .addGap(8, 8, 8)
                .addComponent(jLabel18)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(193, Short.MAX_VALUE))
        );

        layeredPane.add(card4, "card6");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(layeredPane))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(layeredPane, javax.swing.GroupLayout.DEFAULT_SIZE, 660, Short.MAX_VALUE)
        );

        setSize(new java.awt.Dimension(1062, 666));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void SetTextField() {
        timeStart.setText("Starting Time");
        timeStart.setForeground(new Color(153, 153, 153));
        timeEnd.setText("Ending Time");
        timeEnd.setForeground(new Color(153, 153, 153));
        locationInput.setText("Location");
        locationInput.setForeground(new Color(153, 153, 153));
        dateInput.setDate(null);
    }

    private void DisableTextFields() {
        nameTextField.setEditable(false);
        emailTextField.setEditable(false);
        passwordTextField.setEditable(false);
    }

    private void appointmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_appointmentActionPerformed
        // TODO add your handling code here:
        layeredPane.removeAll();
        layeredPane.add(card3);
        layeredPane.repaint();
        layeredPane.revalidate();
    }//GEN-LAST:event_appointmentActionPerformed

    private void appointmentMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_appointmentMouseExited
        // TODO add your handling code here:
        appointment.setBackground(new Color(204, 204, 255));
    }//GEN-LAST:event_appointmentMouseExited

    private void appointmentMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_appointmentMouseEntered
        // TODO add your handling code here:
        appointment.setBackground(new Color(153, 153, 255));
    }//GEN-LAST:event_appointmentMouseEntered

    private void feedbackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_feedbackActionPerformed
        // TODO add your handling code here:
        layeredPane.removeAll();
        layeredPane.add(card4);
        layeredPane.repaint();
        layeredPane.revalidate();
    }//GEN-LAST:event_feedbackActionPerformed

    private void feedbackMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_feedbackMouseExited
        // TODO add your handling code here:
        feedback.setBackground(new Color(204, 204, 255));
    }//GEN-LAST:event_feedbackMouseExited

    private void feedbackMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_feedbackMouseEntered
        // TODO add your handling code here:
        feedback.setBackground(new Color(153, 153, 255));
    }//GEN-LAST:event_feedbackMouseEntered

    private void LogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LogoutActionPerformed
        // TODO add your handling code here:
        int userInput = JOptionPane.showConfirmDialog(null, "Are you sure?", "Confirmation Panel", JOptionPane.YES_NO_OPTION);
        switch (userInput) {
            case JOptionPane.YES_OPTION:
                this.dispose();
                mi.setVisible(true);
                break;
            case JOptionPane.NO_OPTION:
                break;
            default:
                break;
        }
    }//GEN-LAST:event_LogoutActionPerformed

    private void LogoutMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_LogoutMouseExited
        // TODO add your handling code here:
        Logout.setBackground(new Color(204, 204, 255));
    }//GEN-LAST:event_LogoutMouseExited

    private void LogoutMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_LogoutMouseEntered
        // TODO add your handling code here:
        Logout.setBackground(new Color(153, 153, 255));
    }//GEN-LAST:event_LogoutMouseEntered

    private void SettingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SettingsActionPerformed
        // TODO add your handling code here:
        layeredPane.removeAll();
        layeredPane.add(card2);
        layeredPane.repaint();
        layeredPane.revalidate();

        DisableTextFields();
    }//GEN-LAST:event_SettingsActionPerformed

    private void SettingsMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SettingsMouseExited
        // TODO add your handling code here:
        Settings.setBackground(new Color(204, 204, 255));
    }//GEN-LAST:event_SettingsMouseExited

    private void SettingsMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SettingsMouseEntered
        // TODO add your handling code here:
        Settings.setBackground(new Color(153, 153, 255));
    }//GEN-LAST:event_SettingsMouseEntered

    private void HomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HomeActionPerformed
        // TODO add your handling code here:
        layeredPane.removeAll();
        layeredPane.add(card1);
        layeredPane.repaint();
        layeredPane.revalidate();
    }//GEN-LAST:event_HomeActionPerformed

    private void HomeMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_HomeMouseExited
        // TODO add your handling code here:
        Home.setBackground(new Color(204, 204, 255));
    }//GEN-LAST:event_HomeMouseExited

    private void HomeMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_HomeMouseEntered
        // TODO add your handling code here:
        Home.setBackground(new Color(153, 153, 255));
    }//GEN-LAST:event_HomeMouseEntered

    private void saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveActionPerformed
        // TODO add your handling code here:
        editDetails.setSelected(false);
        editDetails.setIcon(new ImageIcon(getClass().getResource("/Images/disableEdit.png")));

        user_page_processes dcp = new user_page_processes(ID, emailTextField.getText(), nameTextField.getText(), passwordTextField.getText());
        try {
            dcp.setDetailsLS(1);
        } catch (IOException ex) {
            System.out.println("Saving failed.");
        }
        DisableTextFields();
    }//GEN-LAST:event_saveActionPerformed

    private void editDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editDetailsActionPerformed
        // TODO add your handling code here:
        if (editDetails.isSelected()) {
            nameTextField.setEditable(true);
            emailTextField.setEditable(true);
            passwordTextField.setEditable(true);
            editDetails.setIcon(new ImageIcon(getClass().getResource("/Images/cow.gif")));
        } else {
            nameTextField.setText(lectureName);
            emailTextField.setText(lectureEMail);
            passwordTextField.setText(lecturePass);

            DisableTextFields();
            editDetails.setIcon(new ImageIcon(getClass().getResource("/Images/disableEdit.png")));
        }
    }//GEN-LAST:event_editDetailsActionPerformed

    private void consultationAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_consultationAddActionPerformed
        // TODO add your handling code here:
        //A lot of issues here

        if (timeStart.getText().equals("") || timeEnd.getText().equals("") || locationInput.getText().equals("") || dateInput.getDate() == null) {
            JOptionPane.showMessageDialog(null, "Please fill in all the fields.");
        } else {
            try {
                formattedDate = sdf.format(dateInput.getDate()); //convert date to string with format
                time = timeStart.getText() + "-" + timeEnd.getText();

                user_page_processes l = new user_page_processes(lectureEMail, lectureName, time, locationInput.getText(), formattedDate);

                l.setDetailsLS(3);
                switch (l.getSuccess()) {
                    case 1 -> {
                        //Store in table
                        String[] data = {time, locationInput.getText(), formattedDate};
                        DefaultTableModel Model = (DefaultTableModel) consultationTable.getModel();
                        Model.addRow(data);
                    }
                    default -> {
                        JOptionPane.showMessageDialog(null, "Table recording issue.", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                }
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, "Sending issue.", "Error", JOptionPane.ERROR_MESSAGE);
            }

            SetTextField();
        }
    }//GEN-LAST:event_consultationAddActionPerformed

    private void consultationDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_consultationDeleteActionPerformed
        // TODO add your handling code here:
        consultationAdd.setEnabled(true);
        consultationSave.setEnabled(false);
        clearConsultationFields.setEnabled(false);
        consultationDelete.setEnabled(false);
        int row = consultationTable.getSelectedRow();

        user_page_processes l2 = new user_page_processes(lectureEMail, lectureName, time, locationInput.getText(), formattedDate, row);

        try {
            l2.setDetailsLS(4);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "Failed to send deletion.", "Error", JOptionPane.ERROR_MESSAGE);
        }
        switch (l2.getSuccess()) {
            case 1 -> {
                DefaultTableModel Model = (DefaultTableModel) consultationTable.getModel();
                Model.removeRow(consultationTable.getSelectedRow());
            }
            default -> {
                JOptionPane.showMessageDialog(null, "Table recording issue.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }

        consultationSave.setEnabled(false);
        clearConsultationFields.setEnabled(false);
        SetTextField();
    }//GEN-LAST:event_consultationDeleteActionPerformed

    private void consultationSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_consultationSaveActionPerformed
        // TODO add your handling code here:
        DefaultTableModel Model = (DefaultTableModel) consultationTable.getModel();
        consultationAdd.setEnabled(true);
        consultationDelete.setEnabled(false);
        consultationSave.setEnabled(false);
        clearConsultationFields.setEnabled(false);

        int row = consultationTable.getSelectedRow();

        if (timeStart.getText().equals("") || timeEnd.getText().equals("") || locationInput.getText().equals("") || dateInput.getDate() == null) {
            JOptionPane.showMessageDialog(null, "Please fill in all the fields.");
        } else {

            formattedDate = sdf.format(dateInput.getDate());
            time = timeStart.getText() + "-" + timeEnd.getText();

            user_page_processes dcp2 = new user_page_processes(lectureEMail, lectureName, time, locationInput.getText(), formattedDate, row);

            try {
                dcp2.setDetailsLS(5);
                switch (dcp2.getSuccess()) {
                    case 1 -> {
                        Model.setValueAt(time, row, 0);
                        Model.setValueAt(locationInput.getText(), row, 1);
                        Model.setValueAt(formattedDate, row, 2);
                    }
                    default -> {
                        JOptionPane.showMessageDialog(null, "Failed to update consultation.", "ERROR", JOptionPane.ERROR_MESSAGE);
                    }
                }
            } catch (IOException ex) {
                System.out.println("Saving failed.");
            }
        }
        SetTextField();
    }//GEN-LAST:event_consultationSaveActionPerformed

    private void consultationTableMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_consultationTableMouseReleased
        // TODO add your handling code here:
        DefaultTableModel Model = (DefaultTableModel) consultationTable.getModel();
        consultationAdd.setEnabled(false);
        clearConsultationFields.setEnabled(true);
        consultationSave.setEnabled(true);
        consultationDelete.setEnabled(true);

        int row = consultationTable.getSelectedRow();

        try (BufferedReader readerL = new BufferedReader(new FileReader(pro.getFilePath(3)))) {
            while ((line = readerL.readLine()) != null) {
                time = Model.getValueAt(row, 0).toString();
                String[] update = time.split("[-]+");
                starttime = update[0];
                endtime = update[1];

                date = Model.getValueAt(row, 2).toString();

                locationInput.setText(Model.getValueAt(row, 1).toString());
                timeStart.setText(starttime);
                timeEnd.setText(endtime);
                dateInput.setDate(new Date(date));

            }
        } catch (Exception e) {
//            JOptionPane.showMessageDialog(null, "File not found.", "Error", JOptionPane.ERROR_MESSAGE);
        }

        locationInput.setForeground(new Color(0, 0, 0));
        timeStart.setForeground(new Color(0, 0, 0));
        timeEnd.setForeground(new Color(0, 0, 0));
    }//GEN-LAST:event_consultationTableMouseReleased

    private void clearConsultationFieldsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearConsultationFieldsActionPerformed
        // TODO add your handling code here:
        consultationAdd.setEnabled(true);
        consultationDelete.setEnabled(false);
        consultationSave.setEnabled(false);
        clearConsultationFields.setEnabled(false);

        SetTextField();
    }//GEN-LAST:event_clearConsultationFieldsActionPerformed

    private void showTimePicker1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showTimePicker1ActionPerformed
        // TODO add your handling code here:
        timePicker1.showPopup(this, 100, 100);
        timePicker1.setDisplayText(timeStart);
        timeStart.setForeground(new Color(0, 0, 0));
    }//GEN-LAST:event_showTimePicker1ActionPerformed

    private void showTimePicker2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showTimePicker2ActionPerformed
        // TODO add your handling code here:
        timePicker2.showPopup(this, 100, 100);
        timePicker2.setDisplayText(timeEnd);
        timeEnd.setForeground(new Color(0, 0, 0));
    }//GEN-LAST:event_showTimePicker2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        feedback_form ff = new feedback_form();
        ff.setVisible(true);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void locationInputFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_locationInputFocusGained
        // TODO add your handling code here:
        if (locationInput.getText().equals("Location")) {
            locationInput.setText("");
            locationInput.setForeground(new Color(0, 0, 0));
        }
    }//GEN-LAST:event_locationInputFocusGained

    private void locationInputFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_locationInputFocusLost
        // TODO add your handling code here:
        if (locationInput.getText().equals("")) {
            locationInput.setText("Location");
            locationInput.setForeground(new Color(153, 153, 153));
        }
    }//GEN-LAST:event_locationInputFocusLost

    private void timeStartFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_timeStartFocusGained
        // TODO add your handling code here:
        if (timeStart.getText().equals("Starting Time")) {
            timeStart.setText("");
            timeStart.setForeground(new Color(0, 0, 0));
        }
    }//GEN-LAST:event_timeStartFocusGained

    private void timeStartFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_timeStartFocusLost
        // TODO add your handling code here:
        if (timeStart.getText().equals("")) {
            timeStart.setText("Starting Time");
            timeStart.setForeground(new Color(153, 153, 153));
        }
    }//GEN-LAST:event_timeStartFocusLost

    private void timeEndFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_timeEndFocusGained
        // TODO add your handling code here:
        if (timeEnd.getText().equals("Ending Time")) {
            timeEnd.setText("");
            timeEnd.setForeground(new Color(0, 0, 0));
        }
    }//GEN-LAST:event_timeEndFocusGained

    private void timeEndFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_timeEndFocusLost
        // TODO add your handling code here:
        if (timeEnd.getText().equals("")) {
            timeEnd.setText("Ending Time");
            timeEnd.setForeground(new Color(153, 153, 153));
        }
    }//GEN-LAST:event_timeEndFocusLost

    private void completeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_completeButtonActionPerformed
        // TODO add your handling code here:
        int row = Appointment.getSelectedRow();
        if (row == -1) {
            JOptionPane.showMessageDialog(null, "Please select a row first.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        DefaultTableModel ModelApp = (DefaultTableModel) Appointment.getModel();

        try (BufferedReader readerL = new BufferedReader(new FileReader(pro.getFilePath(5)))) {
            String line = null;
            String[] parts = null;

            // Read the specific line corresponding to the selected row
            for (int currentLine = 0; (line = readerL.readLine()) != null; currentLine++) {
                if (currentLine == row) {
                    parts = line.split(",");
                    break;
                }
            }

            if (parts == null || parts.length < 10) {
                JOptionPane.showMessageDialog(null, "Invalid or incomplete data for the selected row.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Update the file using user_page_processes
            user_page_processes l2 = new user_page_processes(parts[0]);
            try {
                l2.setDetailsLS(7); // Update the file
            } catch (IOException ex) {
                Logger.getLogger(lecturer_home_page.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(null, "Error updating file. Please try again.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            if (l2.getSuccess() == 1) {
                try (BufferedReader updatedReader = new BufferedReader(new FileReader(pro.getFilePath(5)))) {
                    String updatedLine = null;
                    String[] updatedParts = null;

                    for (int currentLine = 0; (updatedLine = updatedReader.readLine()) != null; currentLine++) {
                        if (currentLine == row) {
                            updatedParts = updatedLine.split(",");
                            break;
                        }
                    }

                    if (updatedParts == null || updatedParts.length < 10) {
                        JOptionPane.showMessageDialog(null, "Updated row data is invalid.", "Error", JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                    ModelApp.setValueAt(updatedParts[1], row, 0); // Student Email
                    ModelApp.setValueAt(updatedParts[2], row, 1); // Student Name
                    ModelApp.setValueAt(updatedParts[5], row, 2); // Time
                    ModelApp.setValueAt(updatedParts[6], row, 3); // Location
                    ModelApp.setValueAt(updatedParts[7], row, 4); // Date
                    ModelApp.setValueAt(updatedParts[8], row, 5); // Status
                    ModelApp.setValueAt(updatedParts[9], row, 6); // Reschedule

                    // Force table refresh
                    ModelApp.fireTableDataChanged(); // Notify model listeners
                    Appointment.repaint(); // Redraw the table

                    System.out.println("File and table updated successfully for row " + row);
                }
            } else {
                JOptionPane.showMessageDialog(null, "File update failed. Table not updated.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (IOException e) {
            System.out.println("Error reading file: " + e.getMessage());
            JOptionPane.showMessageDialog(null, "File read error. Please try again.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_completeButtonActionPerformed

    private void AppointmentMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AppointmentMouseReleased
        // TODO add your handling code here:
        int row1 = Appointment.getSelectedRow();
        selected1.setText(Integer.toString(row1 + 1));
    }//GEN-LAST:event_AppointmentMouseReleased

    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(lecturer_home_page.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(lecturer_home_page.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(lecturer_home_page.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(lecturer_home_page.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//        //</editor-fold>
//        //</editor-fold>
//        //</editor-fold>
//        //</editor-fold>
//        //</editor-fold>
//        //</editor-fold>
//        //</editor-fold>
//
//        /* Create and display the form */
////        java.awt.EventQueue.invokeLater(new Runnable() {
////            public void run() {
////                new lecturer_home_page().setVisible(true);
////            }
////        });
////    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable Appointment;
    private javax.swing.JButton Home;
    private javax.swing.JButton Logout;
    private javax.swing.JButton Settings;
    private javax.swing.JButton appointment;
    private javax.swing.JButton approveReschedule;
    private javax.swing.JButton approveReschedule1;
    private javax.swing.JPanel card1;
    private javax.swing.JPanel card2;
    private javax.swing.JPanel card3;
    private javax.swing.JPanel card4;
    private javax.swing.JButton clearConsultationFields;
    private javax.swing.JButton completeButton;
    private javax.swing.JButton consultationAdd;
    private javax.swing.JButton consultationDelete;
    private javax.swing.JPanel consultationPanel;
    private javax.swing.JButton consultationSave;
    private javax.swing.JTable consultationTable;
    private com.toedter.calendar.JDateChooser dateInput;
    private javax.swing.JToggleButton editDetails;
    private javax.swing.JTextField emailTextField;
    private javax.swing.JButton feedback;
    private javax.swing.JPanel feedbackPanel;
    private javax.swing.JPanel homePanel1;
    private javax.swing.JTextPane id;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextArea jTextArea3;
    private javax.swing.JLayeredPane layeredPane;
    private javax.swing.JTextArea locationInput;
    private javax.swing.JLabel name;
    private javax.swing.JTextField nameTextField;
    private javax.swing.JPasswordField passwordTextField;
    private javax.swing.JButton save;
    private javax.swing.JTextField selected1;
    private javax.swing.JPanel settingsPanel;
    private javax.swing.JButton showTimePicker1;
    private javax.swing.JButton showTimePicker2;
    private javax.swing.JTextField timeEnd;
    private com.raven.swing.TimePicker timePicker1;
    private com.raven.swing.TimePicker timePicker2;
    private javax.swing.JTextField timeStart;
    // End of variables declaration//GEN-END:variables
}
